from pydantic import BaseModel, Field
from typing import List, Optional
from datetime import datetime

from app.api.v1.common.models.base_manifest import ManifestBaseModel
from app.api.v1.common.models.base_models import MetaData, References
from app.api.v1.label.models.base_models import Barcode, LabelResponseBaseModel, ParcelLockerBaseModel, QrCodeBaseModel
from app.api.v1.label.models.webhooks.base_models import UpdateType

class ParcelWithLabel(BaseModel):
    id: str = Field(..., description="The unique identifier for the parcel. If not provided, Gluey will generate a unique identifier.")
    uuid_ref: Optional[str] = Field(None, description="Your own unique identifier for the parcel. This will be included in subsequent messages such as tracking events, label responses etc.")
    carrier_label_meta_data: Optional[list[MetaData]] = Field([], description="The carrier and / or label specific metadata for the parcel that the carrier provided in their API response. These are unique keys that might be useful as identifiers of the parcel, rates etc.")
    tracking_number: str = Field(..., description="The tracking number of the parcel")
    barcodes: Barcode = Field(..., description="The barcodes visible on the parcel.")
    label: LabelResponseBaseModel = Field(..., description="The labels, qr codes and / or parcel locker pin codes that was generated by Gluey / the carrier.")

class UpdateData(BaseModel):
    labels: Optional[list[ParcelWithLabel]] = Field(None, description="If update_type='labels' this property will contain a list of the parcels that were a part of the the shipment including the label, tracking number and barcodes.")
    manifest: Optional[ManifestBaseModel] = Field(None, description="If update_type='manifest' this property will be true if the shipment has been manifested with the carrier.")
    locker_pin: Optional[ParcelLockerBaseModel] = Field(None, description="If update_type='locker_pin' this property will contain the parcel locker pin code that was generated for the shipment incl the location.")
    qr_code: Optional[QrCodeBaseModel] = Field(None, description="If update_type='qr_code' this property will contain the QR code that was generated for the shipment.")

class UpdateShipmentEvent(BaseModel):
    """Class representing updates to a shipment ."""
    id: str = Field(..., description="The unique identifier for the shipment in Gluey.")
    uuid_ref: Optional[str] = Field(None, description="Your own unique identifier for the Shipment.")
    created_utc: datetime = Field(..., description="The date and time in Coordinated Universal Time (UTC+00:00) when the shipment was created in Gluey. The date and time of the shipment is in ISO 8601 format and includes the UTC-offset, e.g. '2021-06-01T12:00:00+00:00'.")
    updated_utc: datetime = Field(..., description="The date and time in Coordinated Universal Time (UTC+00:00) when the shipment was updated in Gluey. The date and time of the shipment is in ISO 8601 format and includes the UTC-offset, e.g. '2021-06-01T12:00:00+00:00'.")
    meta_data: Optional[list[MetaData]] = Field(None, description="Optional. Meta data tags that was assigned to the shipment when it was created.")
    references: References = Field(..., description="References for the shipment.")
    update_type: UpdateType = Field(..., description="The type of update that have been made to the shipment and which determine the type of data that will be included in the update_data property.")
    update_data: UpdateData = Field(..., description="The data related to the update.")