from pydantic import BaseModel, Field
from typing import List, Optional
from enum import Enum
from datetime import datetime

from app.api.v1.common.models.base_models import MetaData, TrackingLevel
from app.api.v1.label.models.base_models import Barcode, LabelFormat, LabelSize, ManifestStatus, ParcelLockerAddress, QrCodeFormat

class LabelResponseModel(BaseModel):
    """Class representing the label that was generated by Gluey / the carrier."""
    format: LabelFormat = Field(..., description="The format of the label that is requested. For example 'PDF', 'JPEG', 'ZPL200' or 'ZPL300'")
    size: LabelSize = Field(..., description="The size of the label. If unspecified it defaults to '4x6' for Outbound carrier services, and 'A4' for return carrier services.")
    base64_encoded: str = Field(..., description="The base64 encoded label in the requested format and size.")

class QrCodeResponseModel(BaseModel):
    """Class representing a QR code that was generated by Gluey / the carrier."""
    format: QrCodeFormat = Field(..., description="The format of the QR code that is requested. For example 'PDF', 'JPEG', 'PNG' etc.")
    base64_encoded: str = Field(..., description="The base64 encoded QR code.")

class ParcelLockerPinCodeStatus(str, Enum):
    """Enum representing the status of the parcel locker pin code."""
    GENERATED = "generated"
    PENDING_CARRIER = "pending_carrier"

class ParcelLockerResponseModel(BaseModel):
    """Class representing a parcel locker, including pin code, that the shipment is assigned to."""
    status: ParcelLockerPinCodeStatus = Field(..., description="The status of the parcel locker pin code. If the status is 'generated', the pin code is ready to be used and provided below in property 'pin_code'. If the status is 'pending_carrier', the pin code is not yet ready and the carrier is still processing it. This pincode will have to be fetched via polling the 'Get Shipment' endpoint, or subscribing to the update shipment webhook.")
    pin_code: Optional[str] = Field(None, description="The pin code for the parcel locker. Only available if the status is 'generated'.")
    locker_number: Optional[str] = Field(..., description="If applicable, some carriers only require the pin code. The locker number of the parcel locker, for example '1234' or 'A12' etc.")
    instructions: Optional[str] = Field(None, description="Instructions on how to use the parcel locker, for example 'Enter the pin code and close the door' etc.")
    address: Optional[ParcelLockerAddress] = Field(..., description="The address of the parcel locker. This is typically the address of the parcel locker location, e.g. 'Tesco, 123 Main Street, Anytown, USA'")

class LabelCodesResponseModel(BaseModel):
    """The label, qr codes and / or parcel locker pin codes that was generated by Gluey / the carrier."""
    label: Optional[LabelResponseModel] = Field(None, description="The label that was generated by Gluey / the carrier.")
    qr_code: Optional[QrCodeResponseModel] = Field(None, description="The QR code that was generated by the carrier, typically for a paperless return.")
    parcel_locker: Optional[ParcelLockerResponseModel] = Field(None, description="The parcel locker, including pin code, that the shipment is assigned to.")

class ItemResponseModel(BaseModel):
    """Class representing an item included in each parcel."""
    id: str = Field(..., description="The unique identifier for the item.")
    uuid_ref: Optional[str] = Field(None, description="Your own unique identifier for the item.")

class ParcelResponseModel(BaseModel):
    """Class representing a parcel in the shipment."""
    id: str = Field(..., description="The unique identifier for the parcel. If not provided, Gluey will generate a unique identifier.")
    uuid_ref: Optional[str] = Field(None, description="Your own unique identifier for the parcel. This will be included in subsequent messages such as tracking events, label responses etc.")
    tracking_number: str = Field(..., description="The tracking number of the parcel")
    barcodes: Barcode = Field(..., description="The barcodes visible on the parcel.")
    labels_codes: LabelCodesResponseModel = Field(..., description="The labels, qr codes and / or parcel locker pin codes that was generated by Gluey / the carrier.")
    carrier_label_meta_data: Optional[list[MetaData]] = Field([], description="The carrier and / or label specific metadata for the parcel that the carrier provided in their API response. These are unique keys that might be useful as identifiers of the parcel, rates etc.")
    items: Optional[list[ItemResponseModel]] = Field([], description="A list of items (e.g. T-shirts, electronics etc) contained in the parcel. Optional, but required for customs clearance and cross-border commerce.")

class ShipmentResponseModel(BaseModel):
    """Class representing a shipment containing multiple parcels."""
    id: str = Field(..., description="The unique identifier for the shipment.")
    uuid_ref: Optional[str] = Field(None, description="Your own unique identifier for the Shipment. This will be included in subsequent messages such as tracking events and can be used to identify the shipment in your own system.")
    created_utc: datetime = Field(..., description="The date and time in Coordinated Universal Time (UTC+00:00) when the shipment was created in the Gluey system. The date and time of the shipment is in ISO 8601 format and includes the UTC-offset, e.g. '2021-06-01T12:00:00+00:00'.")
    updated_utc: datetime = Field(..., description="The date and time in Coordinated Universal Time (UTC+00:00) when the shipment was last updated in the Gluey system. The date and time of the shipment is in ISO 8601 format and includes the UTC-offset, e.g. '2021-06-01T12:00:00+00:00'.")
    tracking_level: TrackingLevel = Field(..., description="The tracking level of the shipment. This indicates if the shipment is tracked at parcel level, shipment level. For shipments with multiple parcels, the parcels are only individually trackable when tracking-level is 'parcel'.")
    manifest_status: ManifestStatus = Field(..., description="The manifest status of the shipment. This indicates if the shipment needs to be manifested with carrier, if Gluey is handling it in the background, if it is not needed, or if it has been done.")
    manifest_id: Optional[str] = Field(..., description="The Gluey manifest id related to the shipment, if applicable and shipment is manifested.")
    tracking_number: Optional[str] = Field(None, description="The tracking number of the shipment as assigned by the carrier. Only available if the carrier does not provide parcel-level tracking.")
    eta: Optional[datetime] = Field(None, description="The estimated time of arrival for the shipment, if provided by the carrier.")
    parcels: list[ParcelResponseModel] = Field([], description="A list of parcels included in the shipment")