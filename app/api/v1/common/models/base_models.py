from enum import Enum
from typing import Optional
from pydantic import BaseModel, Field

class TrackingLevel(str, Enum):
    """At what level the carrier supports tracking events, e.g. 'shipment' or 'parcel'. For shipment-level tracking, the carrier only supports tracking events at the shipment level, and hence parcels are not individually trackable."""
    SHIPMENT = "shipment"
    """The carrier only supports shipment-level tracking events, and hence parcels are not individually trackable."""
    PARCEL = "parcel"
    """The carrier support parcel-level tracking events and tracking will be available for each individual parcel."""

class Value(BaseModel):
    """Class representing monetary value."""
    amount: float = Field(..., description="The monetary amount, e.g. 100.00, 200.50, 300.75 etc.")
    currency: str = Field(..., description="The currency code, e.g. 'USD', 'EUR', 'GBP' etc.")
    
class MetaData(BaseModel):
    """Class representing metadata tag."""
    key: str = Field(..., description="The key of the metadata, e.g. 'order_id', 'customer_id', 'user_name' etc.")
    value: str = Field(..., description="The value of the metadata, e.g. 'ORD123456', 'CUST123456' etc.")

class GeoLocation(BaseModel):
    """Class representing a geographical location."""
    lat: float = Field(..., description="The latitude of the location.")
    lng: float = Field(..., description="The longitude of the location.")

class Contact(BaseModel):
    """Class representing a contact person."""
    name: str = Field(..., description="The name of the contact person")
    email: str = Field(..., description="The email address of the contact person")
    mobile: str = Field(..., description="The mobile phone number of the contact person")

class BaseAddress(BaseModel):
    """Class representing an address."""
    street: str = Field(..., description="The first line of the address")
    street_2: Optional[str] = Field(None, description="The second line of the address")
    postal_code: Optional[str] = Field(..., description="The postal code or ZIP code. Mandatory for most countries except for a few countries in the middle east and africa.")
    city: str = Field(..., description="The city or town")
    state: Optional[str] = Field(None, description="The state or province. Only applicable to specific countries such as the US, Canada, Australia etc.")
    iso_country: str = Field(..., description="The ISO 3166-1 alpha-2 ('US','GB','DE' etc) or alpha-3 ('USA', 'GBR', 'DEU') country code")

class UnitOfWeight(str, Enum):
    """Enum representing the unit of weight."""
    KG = 'kg'
    """Kilogram unit of weight."""
    LB = 'lb'
    """Pound unit of weight."""
    G = 'g'
    """Gram unit of weight."""
    OZ = 'oz'
    """Ounce unit of weight."""

class UnitOfMeasurement(str, Enum):
    """Enum representing the unit of measurement for the dimensions."""

    CM = 'cm'
    """Centimeter unit of measurement."""

    IN = 'in'
    """Inch unit of measurement."""

    M = 'm'
    """Meter unit of measurement."""

    FT = 'ft'
    """Foot unit of measurement."""

    MM = 'mm'
    """Millimeter unit of measurement."""

    YD = 'yd'
    """Yard unit of measurement."""

class Dimensions(BaseModel):
    """Class representing the dimensions of the parcel."""
    length: float = Field(..., description="The length of the parcel")
    width: float = Field(..., description="The width of the parcel")
    height: float = Field(..., description="The height of the parcel")
    unit: UnitOfMeasurement = Field(UnitOfMeasurement.CM, description="The unit of measurement for the dimensions. Default is 'cm' if left unspecified.")

class Weight(BaseModel):
    """Class representing weight."""
    value: float = Field(..., description="The weight, e.g. 1.5, 2.0, 3.5 etc.")
    unit: UnitOfWeight = Field(UnitOfWeight.KG, description="The unit of weight. Default is 'kg' if left unspecified.")

class DocumentFormat(str, Enum):
    """Enum representing the format of a document."""
    PDF = 'pdf'  # Portable Document Format
    JPEG = 'jpeg'  # Joint Photographic Experts Group

class DocumentSource(str, Enum):
    """Enum representing the source of the document and who generated it."""
    GLUEY = 'gluey'
    """The document is generated by Gluey."""
    
    CARRIER = 'carrier'
    """The document is generated by the carrier."""

class DocumentType(str, Enum):
    """Enum representing the type of document."""    
    CARRIER_MANIFEST = 'carrier_manifest'
    """The document is generated by the carrier upon sending a manifest / close-out call towards them."""
    
    COMMERCIAL_INVOICE = 'commercial_invoice'
    """The document is a commercial invoice that is required for international trade and customs procedures."""
    
    PROOF_OF_DELIVERY = 'proof_of_delivery'
    """The document is a proof of delivery that the carrier did."""
    
    PICKUP_RECEIPT = 'pickup_receipt'
    """The document is a receipt from a pickup that the carrier did."""

    LOAD_LIST = 'load_list'
    """The document is a load list that the carrier did."""    

    BOL = 'bol'
    """The document is a bill of lading that the carrier did."""
    
    OTHER = 'other'
    """The document is a receipt from a pickup that the carrier did."""

class Document(BaseModel):
    """Class representing a document generated by either Gluey or the carrier."""
    format: DocumentFormat = Field(..., description="The format of the document that is requested. For example 'PDF' or 'JPEG'")
    type: DocumentType = Field(..., description="The type of document that is requested, e.g. 'CARRIER_MANIFEST', 'COMMERCIAL_INVOICE', 'PROOF_OF_DELIVERY', 'PICKUP_RECEIPT'")
    description: Optional[str] = Field(None, description="A description of the document, e.g. 'Commercial Invoice for customs'.")
    source: DocumentSource = Field(..., description="The source of the document and who generated it, either Gluey or the carrier.")
    base64_document: str = Field(..., description="The document in base64 encoding.")

class References(BaseModel):
    """Class representing references for the shipment."""
    shipper: Optional[str] = Field(None, description="The reference number that the shipper / sender / consignor use for this shipment, typically an order reference or similar.")
    receiver: Optional[str] = Field(None, description="The reference number that the receiver / recipient / consignee of this use shipment.")
    saas_provider: Optional[str] = Field(None, description="The reference number that the OMS / WMS / CMS etc as a third-party software provider use to identify this shipment.")

class GlueyPaidApiServices(BaseModel):
    """Gluey operations that come with a surcharge.
    """        
    address_correction: Optional[bool] = Field(None, description="If label call fails due to an address issue, Gluey will attempt to correct the address and retry the label call towards the carrier. Only one attempt will be made. If the address cannot be corrected, the label call will fail.")   
    smart_crop: Optional[bool] = Field(None, description="If either goods description (parcel.goods_description) or item description (item.description) is too long, Gluey will attempt to crop this description and retry the call.")

class GlueyFreeApiServices(BaseModel):
    """Gluey operations that can be used free of charge.
    """    
    auto_manifest: Optional[bool] = Field(None, description="If the carrier requires a manifest / close-out call, Gluey will automatically execute this in the background after the label can has finished.")
    dimension_conversion: Optional[bool] = Field(None, description="If the unit of dimensions of the parcel are not supported by the carrier, Gluey will convert the dimensions to a supported unit, e.g. from 'in' to 'cm'.")
    exchange_rate_conversion: Optional[bool] = Field(None, description="If the currency of any monetary value is not supported by the carrier, Gluey will convert the currency and monetary amount to the currency the carrier request. The system is configured to fetch exchange rates precisely at 00:00 (midnight) local time in the United Kingdom. Note that this corresponds to British Summer Time (BST) during daylight saving months and Greenwich Mean Time (GMT) otherwise.")    
    override_goods_descriptions: Optional[str] = Field(None, description="Hardcode the goods descriptions of the parcels by providing a string value here, e.g. 'electronics'. This will override any existing goods description.")
    override_weight: Optional[float] = Field(None, description="Hardcode the weight, by providing a float value here, e.g. '2.95'. This will be considered of unit 'kg' and will override the weight of the parcels.")
    weight_conversion: Optional[float] = Field(None, description="If the weight unit is not supported by the carrier, Gluey will convert the weight to a supported unit, e.g. from 'lb' to 'kg'.")    

class GlueyApiServices(BaseModel):
    """Gluey have many convenience services that can be triggered as part of the label call.
    
    Below are the various operations that can be executed as part of the label call.
    """
    free: Optional[GlueyFreeApiServices] = Field(..., description="Gluey operations that can be used free of charge.")
    paid: Optional[GlueyPaidApiServices] = Field(..., description="Gluey operations that come with a surcharge.")